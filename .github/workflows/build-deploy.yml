# Github Actions workflow for building the Docker image, pushing to Artifact
# Registry, and deploying to Cloud Run.

# Copyright 2024 Qi Tianshi. All rights reserved.


name: Build and Deploy

on:

  # Deployment
  release:
    types:
      - published

  # Test-builds PRs without deploying.
  pull_request:

  # Manual trigger, with option for test-building without deploying.
  workflow_dispatch:
    inputs:
      no_deploy:
        description: Build without deploying
        type: boolean
        default: false

env:

  # The address of the Docker registry.
  REGISTRY_ADDRESS: ${{ vars.GCP_REGION }}-docker.pkg.dev

  # Tag for the Docker image. If the workflow was triggered by a release, the
  # image tag matches the release tag. Otherwise, the SHA of the current
  # commit is used.
  DOCKER_TAG: "${{ vars.GCP_REGION }}-docker.pkg.dev\
    /${{ vars.GCP_PROJECT_ID }}\
    /${{ vars.GCP_GAR_REPO }}\
    /${{ vars.GCP_GCR_SERVICE }}\
    :${{ github.event_name == 'release' && github.event.release.tag_name || github.sha }}"

  # The artifact name and path where the Docker image is temporarily stored to
  # transfer it between jobs.
  ARTIFACT_TEMP_STORE_NAME: ${{ vars.GCP_GAR_REPO }}-image
  ARTIFACT_TEMP_STORE_DIR: /tmp
  ARTIFACT_TEMP_STORE_PATH: /tmp/${{ vars.GCP_GAR_REPO }}-image.tar

jobs:

  # Builds the Docker image and uploads the artifact.
  build:

    runs-on: ubuntu-latest

    # Outputs the ID of the uploaded image artifact so it can be deleted later.
    outputs:
      artifact-id: ${{ steps.upload-artifact.outputs.artifact-id }}

    steps:

      # Checks out repos. For security, the duty-rooster-core submodule is not
      # checked out if the workflow was triggered by pull request, and the pull
      # request was made by Dependabot or came from an external fork.
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: ${{ !(github.event_name == 'pull_request' && (github.actor == 'dependabot[bot]' || github.event.pull_request.head.repo.full_name != github.repository)) }}
          token: ${{ secrets.DRCORE_GITHUB_TOKEN }}

      # Sets up Docker Buildx.
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Builds the Docker image without pushing. Outputs a tar archive for
      # uploading.
      - name: Build Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          tags: ${{ env.DOCKER_TAG }}
          load: true
          outputs: type=docker,dest=${{ env.ARTIFACT_TEMP_STORE_PATH }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Uploads artifact for use in deploy job. Only run if it is needed later.
      - name: Upload Docker image artifact
        id: upload-artifact
        uses: actions/upload-artifact@v4
        if: ${{ !(github.event_name == 'pull_request' || github.event.inputs.no_deploy == 'true') }}
        with:
          name: ${{ env.ARTIFACT_TEMP_STORE_NAME }}
          path: ${{ env.ARTIFACT_TEMP_STORE_PATH }}
          retention-days: 1

  deploy:

    # This job is not run if the workflow was triggered by a pull request, or
    # workflow dispatch with `no_deploy` set to 'true'.
    if: ${{ !(github.event_name == 'pull_request' || github.event.inputs.no_deploy == 'true') }}

    runs-on: ubuntu-latest

    # Ensures build is successful before deploying.
    needs: build

    permissions:
      contents: read
      id-token: write
      actions: write

    # Disallows concurrent deployments.
    concurrency:
      group: deploy-cloud-run
      cancel-in-progress: true

    steps:

      # Downloads artifact from build job.
      - name: Download Docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.ARTIFACT_TEMP_STORE_NAME }}
          path: ${{ env.ARTIFACT_TEMP_STORE_DIR }}

      # Deletes the artifact after use.
      - name: Delete Docker image artifact
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.actions.deleteArtifact({
              owner: context.repo.owner,
              repo: context.repo.repo,
              artifact_id: ${{ needs.build.outputs.artifact-id }}
            });

      # Authenticates GCP using Workload Identity Federation. Outputs an access
      # token for Docker to authenticate. Outputs a credential file for other
      # GCP steps.
      - name: Authenticate Google Cloud
        id: gcp-auth
        uses: google-github-actions/auth@v2
        with:
          project_id: ${{ vars.GCP_PROJECT_ID }}
          workload_identity_provider: ${{ vars.GCP_WIF_PROVIDER }}
          service_account: ${{ vars.GCP_WIF_SERVICE_ACCOUNT }}
          token_format: access_token

      # Authenticates Docker to Artifact Registry.
      - name: Authenticate Docker
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_ADDRESS }}
          username: oauth2accesstoken
          password: ${{ steps.gcp-auth.outputs.access_token }}

      # Pushes the Docker image from the build job to Artifact Registry.
      - name: Push Docker image
        run: |
          docker load --input ${{ env.ARTIFACT_TEMP_STORE_PATH }}
          docker push ${{ env.DOCKER_TAG }}

      # Deploys the image from Artifact Registry to Cloud Run.
      - name: Deploy to Cloud Run
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ vars.GCP_GCR_SERVICE }}
          region: ${{ vars.GCP_REGION }}
          image: ${{ env.DOCKER_TAG }}
